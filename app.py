# streamlit_app.py
import json
import base64
import zlib
from datetime import datetime
from typing import Dict, Any, List, Optional

import streamlit as st

# --------- PAGE CONFIG ---------
st.set_page_config(
    page_title="MirrorGarden ‚Äî ett psykologiskt minispel",
    page_icon="üåø",
    layout="centered",
    initial_sidebar_state="collapsed",
)

# --------- STATE ---------
if "step" not in st.session_state:
    st.session_state.step = 0
if "profile" not in st.session_state:
    st.session_state.profile = {
        "name": "",
        "language": "sv",
        "consent": False,
        "private_mode": True,
        "light_theme": False
    }
if "answers" not in st.session_state:
    st.session_state.answers: Dict[str, Any] = {}
if "started_at" not in st.session_state:
    st.session_state.started_at = datetime.utcnow().isoformat()
if "panic_mode" not in st.session_state:
    st.session_state.panic_mode = False
if "card_index" not in st.session_state:
    st.session_state.card_index = -1

# --------- QUERY PARAM HELPERS (stable API) ---------
def qp_get(name: str, default: Optional[str] = None) -> Optional[str]:
    """Read a query param robustly (handles both str and legacy list)."""
    v = st.query_params.get(name, default)
    if isinstance(v, list):  # legacy safety
        return v[0] if v else default
    return v

def qp_set(params: Dict[str, str], replace: bool = False):
    """Set query params using stable API. Triggers a rerun automatically."""
    if replace:
        st.query_params = {k: str(v) for k, v in params.items()}
    else:
        current = dict(st.query_params)
        current.update({k: str(v) for k, v in params.items()})
        st.query_params = current

def qp_clear():
    st.query_params = {}

# --------- SHARE / REPORT HELPERS ---------
def pack_share_data() -> str:
    """Compress + encode an export pack for a URL param."""
    pack = export_pack()
    raw = json.dumps(pack, ensure_ascii=False, separators=(",", ":")).encode("utf-8")
    comp = zlib.compress(raw, level=9)
    tok = base64.urlsafe_b64encode(comp).decode("ascii")
    return tok

def unpack_share_data(tok: str) -> Optional[Dict[str, Any]]:
    try:
        comp = base64.urlsafe_b64decode(tok.encode("ascii"))
        raw = zlib.decompress(comp)
        data = json.loads(raw.decode("utf-8"))
        return data
    except Exception:
        return None

def enter_report_mode_from_query() -> Optional[Dict[str, Any]]:
    if qp_get("mode") == "report" and qp_get("r"):
        data = unpack_share_data(qp_get("r"))
        return data
    return None

# --------- CONTENT DEFINITIONS ---------
SECTIONS = [
    {"id": "intro", "title": "Intro", "emoji": "üåø"},
    {"id": "ground", "title": "Andnings-ankare", "emoji": "ü´Å"},
    {"id": "timeline", "title": "Livslinje", "emoji": "üß≠"},
    {"id": "voices", "title": "Inre r√∂ster", "emoji": "üé≠"},
    {"id": "boundaries", "title": "Gr√§nslabb", "emoji": "üß±"},
    {"id": "attachment", "title": "Anknytningskompass", "emoji": "üß≤"},
    {"id": "values", "title": "V√§rdekarta", "emoji": "üß°"},
    {"id": "cards", "title": "Reflektionskort", "emoji": "üÉè"},
    {"id": "soothing", "title": "Egen trygghetskit", "emoji": "üß∞"},
    {"id": "letter", "title": "Brev till mig sj√§lv", "emoji": "‚úçÔ∏è"},
    {"id": "summary", "title": "Insiktskarta", "emoji": "üìú"},
]

BOUNDARY_STATEMENTS = [
    "Jag s√§ger nej utan att f√∂rklara mig i situationer d√§r det beh√∂vs.",
    "Jag m√§rker tidigt n√§r n√•gon kliver √∂ver mina gr√§nser.",
    "Jag tar ansvar f√∂r mitt nej, √§ven om andra blir besvikna.",
    "Jag f√∂rhandlar n√§r gr√§nser krockar, ist√§llet f√∂r att ge upp.",
    "Jag vet vad jag beh√∂ver f√∂r att k√§nna mig trygg i en relation.",
    "Jag s√§tter tidsgr√§nser n√§r jag hj√§lper andra.",
    "Jag ber om utrymme n√§r jag √§r √∂verv√§ldigad.",
    "Jag kan ta emot ett nej utan att ta det personligt.",
]

ATTACHMENT_ITEMS = {
    "Trygg": [
        "Jag k√§nner mig v√§rd k√§rlek √§ven n√§r saker g√•r fel.",
        "Jag kan vara n√§ra utan att tappa mig sj√§lv.",
        "Jag uttrycker behov utan skam."
    ],
    "Ambivalent/Anxious": [
        "Jag blir orolig n√§r svar dr√∂jer.",
        "Jag √∂veranalyserar l√§tt tonfall och emojis.",
        "Jag s√∂ker ofta bekr√§ftelse n√§r jag k√§nner mig os√§ker."
    ],
    "Undvikande": [
        "Jag beh√∂ver mycket egen tid f√∂r att k√§nna mig okej.",
        "Jag blir kv√§vd n√§r n√•gon vill 'definiera' relationen snabbt.",
        "Jag h√•ller ofta k√§nslor f√∂r mig sj√§lv."
    ],
    "R√§dd/Desorganiserad": [
        "Jag vill vara n√§ra men v√§xlar snabbt till att dra mig undan.",
        "Intimitet kan trigga min kamp/flykt-reaktion.",
        "Jag testar andra f√∂r att se om de stannar."
    ]
}

VALUES_POOL = [
    "Frihet","Trygghet","Familj","R√§ttvisa","Humor","√Ñventyr","Lojalitet","Sj√§lvrespekt",
    "Mjukhet","Styrka","√Ñrlighet","Andlighet","Kreativitet","Ansvar","L√§rande","K√§rlek",
    "Integritet","Gemenskap","Mod","Tillit","Balans","Framg√•ng","Oberoende","T√•lamod"
]

SOOTHING_OPTIONS = [
    "Andning: 4-7-8 i 2 minuter",
    "Kropps-scan fr√•n huvud till t√•",
    "Lugn musik eller favoritdikt",
    "Varm dusch, v√§tska, n√•got litet att √§ta",
    "Skriva tre rader: 'Just nu k√§nner jag‚Ä¶,' 'Det betyder‚Ä¶,' 'Jag beh√∂ver‚Ä¶'",
    "Meddela en v√§n: 'Jag vill bara att du lyssnar'",
    "G√• en 10-minuters promenad utan mobil",
    "Byt milj√∂: √∂ppet f√∂nster, balkong, ute"
]

REFLECTION_CARDS = [
    {"q": "Vilken del av dig f√∂rtj√§nar mer mjukhet just nu?", "mode": "text"},
    {"q": "N√§r k√§nde du dig som mest levande senaste √•ret ‚Äì vad h√§nde?", "mode": "text"},
    {"q": "Om 'trygghet' var en plats, hur ser den ut och vad h√∂rs d√§r?", "mode": "text"},
    {"q": "Vad √§r en liten gr√§ns du vill h√•lla den h√§r veckan?", "mode": "text"},
    {"q": "Vilket av dessa k√§nns mest sant idag?", "mode": "choice",
     "choices": ["Jag beh√∂ver vila", "Jag beh√∂ver kontakt", "Jag beh√∂ver utrymme", "Jag beh√∂ver tydlighet"]},
    {"q": "Vilken handling skulle framtida-du tacka dig f√∂r ikv√§ll?", "mode": "text"},
    {"q": "Vilken relationell myt vill du sl√§ppa?", "mode": "text"},
    {"q": "Vilken mikro-rutin (‚â§5 min) kan st√∂tta dig dagligen?", "mode": "text"},
]

# --------- THEME (CSS) ---------
def inject_css(light: bool):
    if light:
        bg = "#fafafa"; text="#0b0c10"; card="#ffffff"; border="#e6e6e6"; sub="#444"
    else:
        bg = "#0e1117"; text="#e8e9ec"; card="#0e1117"; border="#262730"; sub="#a6a7ab"
    st.markdown(
        f"""
        <style>
            html, body, [data-testid="stAppViewContainer"] {{
                background: {bg};
                color: {text};
            }}
            .block-container {{padding-top: 1rem; padding-bottom: 2rem; max-width: 720px;}}
            .stButton>button {{border-radius: 14px; padding: 0.7rem 1rem; font-weight: 600;}}
            .stTextInput>div>div>input, .stTextArea textarea {{font-size: 1.05rem;}}
            .question-card {{background: {card}; border: 1px solid {border}; border-radius: 16px; padding: 14px; margin: 10px 0;}}
            .soft {{opacity: 0.92;}}
            .pill {{display:inline-block; padding: 6px 10px; border-radius: 999px; border:1px solid {border};}}
            .muted {{color:{sub}; font-size:0.95rem;}}
            .center {{text-align:center;}}
            .title {{font-size:1.6rem; font-weight:800; line-height:1.2;}}
            .subtitle {{font-size:1.1rem; opacity:0.95;}}
            .disclaimer {{background:{card}; border:1px solid {border}; border-radius:14px; padding:12px;}}
            .tiny {{font-size:0.85rem;}}
            .divider {{height:1px; background:{border}; margin:14px 0;}}
        </style>
        """,
        unsafe_allow_html=True,
    )

# --------- NAV HELPERS ---------
def step_index_by_id(section_id: str) -> int:
    for i, s in enumerate(SECTIONS):
        if s["id"] == section_id:
            return i
    return 0

def go_to(section_id: str):
    st.session_state.step = step_index_by_id(section_id)

def next_step():
    st.session_state.step = min(st.session_state.step + 1, len(SECTIONS) - 1)

def prev_step():
    st.session_state.step = max(st.session_state.step - 1, 0)

# --------- SCORING ---------
def polar_scores() -> Dict[str, float]:
    b_scores = st.session_state.answers.get("boundaries_scores", [4]*len(BOUNDARY_STATEMENTS))
    b_avg = sum(b_scores)/len(b_scores) if b_scores else 0
    a_scores = st.session_state.answers.get("attachment_scores", {})
    a_norm = {k: (sum(v)/len(v) if v else 0) for k, v in a_scores.items()}
    return {
        "Gr√§nser": b_avg,
        "Trygghet": a_norm.get("Trygg", 0),
        "Oro/Anknytning": a_norm.get("Ambivalent/Anxious", 0),
        "Avst√•nd/Undvikande": a_norm.get("Undvikande", 0),
        "Ambivalens/R√§dsla": a_norm.get("R√§dd/Desorganiserad", 0)
    }

# --------- EXPORT ---------
def export_pack() -> Dict[str, Any]:
    return {
        "meta": {
            "app": "MirrorGarden",
            "version": "1.2.0",
            "started_at": st.session_state.started_at,
            "exported_at": datetime.utcnow().isoformat(),
        },
        "profile": st.session_state.profile,
        "answers": st.session_state.answers,
        "scores": polar_scores()
    }

def make_markdown_report(data: Optional[Dict[str, Any]] = None) -> str:
    if data is None:
        data = export_pack()
    p = data.get("profile", {})
    scores = data.get("scores", {})
    name = p.get("name") or "V√§n"
    vals = data.get("answers", {}).get("top_values", [])
    soothing = data.get("answers", {}).get("soothing_kit", [])
    letter = data.get("answers", {}).get("self_letter", "").strip()
    tl = data.get("answers", {}).get("timeline_points", [])
    highlights = [
        f"- Gr√§nser (sj√§lvrespekt): **{scores.get('Gr√§nser',0):.1f}/10**",
        f"- Trygghet i n√§rhet: **{scores.get('Trygghet',0):.1f}/10**",
        f"- Oro/Anknytning: **{scores.get('Oro/Anknytning',0):.1f}/10**",
        f"- Avst√•nd/Undvikande: **{scores.get('Avst√•nd/Undvikande',0):.1f}/10**",
        f"- Ambivalens/R√§dsla: **{scores.get('Ambivalens/R√§dsla',0):.1f}/10**",
    ]

    report = f"""# MirrorGarden ‚Äî Din insiktskarta

Hej {name}, h√§r √§r en sammanfattning av din resa i appen.

## Huvudpo√§nger
{chr(10).join(highlights)}

## Dina toppv√§rden
{", ".join(vals) if vals else "‚Äî"}

## Din trygghetskit
{chr(10).join([f"- {x}" for x in soothing]) if soothing else "‚Äî"}

## Din livslinje (nedslag)
{chr(10).join([f"- {x}" for x in tl]) if tl else "‚Äî"}

## Brev till mig sj√§lv
{letter if letter else "‚Äî"}

---
*Den h√§r appen √§r inte v√•rd eller terapi. Om n√•got v√§cker jobbiga k√§nslor: prata med n√•gon du litar p√• eller s√∂k st√∂d.*
"""
    return report

# --------- QUICK EXIT ---------
with st.container():
    col1, col2 = st.columns([1,1])
    with col2:
        if st.button("‚ö° Quick Exit", help="Rensar sessionen och visar ofarligt inneh√•ll.", use_container_width=True):
            st.session_state.clear()
            st.session_state.panic_mode = True
            st.rerun()

if st.session_state.panic_mode:
    st.success("Du √§r trygg h√§r. Andas in i 4 sekunder, h√•ll 7, andas ut 8. Upprepa 3 g√•nger.")
    st.image("https://picsum.photos/seed/mirror-garden/800/400", caption="En trygg plats.")
    st.stop()

# --------- THEME TOGGLE (reads from stable query param) ---------
theme_q = qp_get("theme", "dark")
if isinstance(theme_q, str):
    st.session_state.profile["light_theme"] = (theme_q == "light")

inject_css(light=st.session_state.profile.get("light_theme", False))

# --------- HEADER ---------
st.markdown(f"<div class='title center'>üåø MirrorGarden</div>", unsafe_allow_html=True)
st.markdown("<p class='subtitle center soft'>Ett litet, vackert, psykologiskt minispel f√∂r sj√§lvinsikt.<br/>Mobilv√§nligt. Inget sparas i molnet.</p>", unsafe_allow_html=True)
st.markdown("<div class='divider'></div>", unsafe_allow_html=True)

# Theme controls
with st.expander("üéõÔ∏è Visuella inst√§llningar", expanded=False):
    light = st.toggle("Ljust tema", value=st.session_state.profile.get("light_theme", False))
    st.session_state.profile["light_theme"] = light
    # persist in URL without experimental API
    qp_set({"theme": "light" if light else "dark"})

# --------- PROGRESS ---------
prog = (st.session_state.step + 1) / len(SECTIONS)
st.progress(prog, text=f"Steg {st.session_state.step+1} / {len(SECTIONS)}")

def step_header():
    s = SECTIONS[st.session_state.step]
    st.markdown(f"<div class='pill muted center'>{s['emoji']} {s['title']}</div>", unsafe_allow_html=True)

# --------- RENDERERS ---------
def render_intro():
    step_header()
    st.markdown(
        """
        <div class='disclaimer'>
        <b>Innan vi b√∂rjar:</b><br/>
        Detta √§r en mjuk, guidande upplevelse ‚Äì inte terapi eller v√•rd. 
        Du best√§mmer takten och vad du vill dela. Inget skickas till servern; allt stannar i din webbl√§sare tills du sj√§lv exporterar.
        </div>
        """, unsafe_allow_html=True
    )
    name = st.text_input("Vad vill du bli kallad?", value=st.session_state.profile.get("name",""), placeholder="(valfritt)")
    private = st.toggle("Privat l√§ge (d√∂lj k√§nsliga f√§lt i publika milj√∂er)", value=st.session_state.profile.get("private_mode", True))
    consent = st.checkbox("Jag f√∂rst√•r och vill g√• vidare.", value=st.session_state.profile.get("consent", False))
    st.session_state.profile.update({"name": name.strip(), "private_mode": private, "consent": consent})
    st.info("Tips: S√§tt mobilen p√• 'St√∂r ej' i 10‚Äì15 min.")
    st.button("Starta resan ‚Üí", on_click=next_step, disabled=not consent, use_container_width=True)

def render_ground():
    step_header()
    st.markdown("**ü´Å Andnings-ankare (1 minut)**\n\nS√§tt en mjuk timer i huvudet. Andas l√•ngsamt. L√§gg m√§rke till tre saker du ser, h√∂r och k√§nner.", help="Som att landa i kroppen innan vi gr√§ver.")
    three = st.text_area("Skriv 3 saker du m√§rker just nu:", value=st.session_state.answers.get("grounding_notes",""), placeholder="1) ...\n2) ...\n3) ...", height=100)
    st.session_state.answers["grounding_notes"] = three
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_timeline():
    step_header()
    st.markdown("**üß≠ Livslinje ‚Äì tre nedslag som format dig.**", help="De kan vara sm√• eller stora. V√§lj s√•dant som k√§nns sant.")
    items = st.session_state.answers.get("timeline_points", ["", "", ""])
    if not isinstance(items, list) or len(items) != 3:
        items = ["", "", ""]
    for i in range(3):
        items[i] = st.text_input(f"Nedslag {i+1}", value=items[i], placeholder="t.ex. n√§r jag flyttade hemifr√•n / ett viktigt beslut / en trygg plats", key=f"tl_{i}")
    st.session_state.answers["timeline_points"] = items
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_voices():
    step_header()
    st.markdown("**üé≠ Inre r√∂ster: Kritiker & Allierad**", help="Skriv ned vad de brukar s√§ga ‚Äì och l√•t allieraden svara.")
    c1, c2 = st.columns(2)
    with c1:
        critic = st.text_area("Inre kritiker ‚Äì vad s√§ger den?", value=st.session_state.answers.get("inner_critic",""), placeholder="t.ex. 'du duger inte'‚Ä¶", height=120)
    with c2:
        ally = st.text_area("Inre allierad ‚Äì hur svarar den?", value=st.session_state.answers.get("inner_ally",""), placeholder="t.ex. 'jag v√§xer varje dag'‚Ä¶", height=120)
    st.session_state.answers["inner_critic"] = critic
    st.session_state.answers["inner_ally"] = ally
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_boundaries():
    step_header()
    st.markdown("**üß± Gr√§nslabb ‚Äì skattning 0‚Äì10**", help="0 = st√§mmer inte alls, 10 = st√§mmer helt.")
    scores = st.session_state.answers.get("boundaries_scores", [5]*len(BOUNDARY_STATEMENTS))
    out = []
    for i, q in enumerate(BOUNDARY_STATEMENTS):
        out.append(st.slider(q, 0, 10, int(scores[i]) if i < len(scores) else 5, key=f"b_{i}"))
    st.session_state.answers["boundaries_scores"] = out
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_attachment():
    step_header()
    st.markdown("**üß≤ Anknytningskompass ‚Äì hur ofta st√§mmer f√∂ljande?**", help="0 = Aldrig, 10 = Ofta")
    store: Dict[str, List[int]] = st.session_state.answers.get("attachment_scores", {})
    for style, items in ATTACHMENT_ITEMS.items():
        st.markdown(f"**{style}**")
        local = store.get(style, [3]*len(items))
        new_local = []
        for i, it in enumerate(items):
            new_local.append(st.slider(it, 0, 10, int(local[i]) if i < len(local) else 3, key=f"a_{style}_{i}"))
        store[style] = new_local
        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
    st.session_state.answers["attachment_scores"] = store
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_values():
    step_header()
    st.markdown("**üß° V√§rdekarta ‚Äì v√§lj upp till 6 som k√§nns 'du'**")
    chosen = st.multiselect("V√§lj dina ord:", VALUES_POOL, default=st.session_state.answers.get("top_values", []), max_selections=6)
    st.session_state.answers["top_values"] = chosen
    why = st.text_area("Varf√∂r dessa? Koppla g√§rna till din livslinje.", value=st.session_state.answers.get("values_why",""), height=120)
    st.session_state.answers["values_why"] = why
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_cards():
    step_header()
    st.markdown("**üÉè Reflektionskort**")
    colA, colB = st.columns([2,1])
    with colA:
        if st.button("Dra ett kort üé¥", use_container_width=True):
            st.session_state.card_index = (st.session_state.card_index + 1) % len(REFLECTION_CARDS)
    with colB:
        st.caption("Dra f√∂r nytt kort.")

    idx = st.session_state.card_index
    if idx == -1:
        st.info("Tryck p√• **Dra ett kort** f√∂r att b√∂rja.")
        return

    card = REFLECTION_CARDS[idx]
    st.markdown(f"<div class='question-card'><b>Fr√•ga:</b><br/>{card['q']}</div>", unsafe_allow_html=True)

    # Answers store
    answers = st.session_state.answers.get("reflection_cards", {})
    if card["mode"] == "text":
        val = st.text_area("Ditt svar:", value=answers.get(str(idx), ""), height=120)
        answers[str(idx)] = val
    elif card["mode"] == "choice":
        choice = st.radio(
            "V√§lj ett alternativ:",
            card["choices"],
            index=card["choices"].index(answers.get(str(idx), card["choices"][0])) if str(idx) in answers else 0
        )
        answers[str(idx)] = choice
    st.session_state.answers["reflection_cards"] = answers

    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_soothing():
    step_header()
    st.markdown("**üß∞ Trygghetskit ‚Äì v√§lj 3‚Äì5 som brukar hj√§lpa**")
    chosen = st.multiselect("Snabbhj√§lp:", SOOTHING_OPTIONS, default=st.session_state.answers.get("soothing_kit", []))
    st.session_state.answers["soothing_kit"] = chosen
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_letter():
    step_header()
    st.markdown("**‚úçÔ∏è Brev till mig sj√§lv (framtida jag, 6 m√•nader fram)**")
    letter = st.text_area("Skriv fritt:", value=st.session_state.answers.get("self_letter",""), height=180, placeholder="Vad vill du att framtida du ska minnas, n√§r det bl√•ser?")
    st.session_state.answers["self_letter"] = letter
    st.button("N√§sta ‚Üí", on_click=next_step, use_container_width=True)

def render_summary():
    step_header()
    st.markdown("**üìú Din insiktskarta**")
    scores = polar_scores()

    colA, colB = st.columns(2)
    with colA:
        st.metric("Gr√§nser", f"{scores['Gr√§nser']:.1f}/10")
        st.metric("Trygghet", f"{scores['Trygghet']:.1f}/10")
        st.metric("Oro/Anknytning", f"{scores['Oro/Anknytning']:.1f}/10")
    with colB:
        st.metric("Undvikande", f"{scores['Avst√•nd/Undvikande']:.1f}/10")
        st.metric("Ambivalens/R√§dsla", f"{scores['Ambivalens/R√§dsla']:.1f}/10")

    st.markdown("**Text-visualisering:**", help="En liten k√§nsla f√∂r riktningen.")
    for k, v in scores.items():
        filled = "‚ñà" * int(round(v))
        empty = "‚ñë" * (10 - int(round(v)))
        st.write(f"{k:>20}: {filled}{empty}  {v:.1f}/10")

    st.markdown("<div class='divider'></div>", unsafe_allow_html=True)

    # Export buttons
    pack = export_pack()
    md = make_markdown_report().encode("utf-8")
    raw = json.dumps(pack, ensure_ascii=False, indent=2).encode("utf-8")
    st.download_button("‚¨áÔ∏è Ladda ned insiktskarta (.md)", data=md, file_name="insiktskarta.md", mime="text/markdown")
    st.download_button("‚¨áÔ∏è Exportera data (.json)", data=raw, file_name="mirror-garden.json", mime="application/json")

    # Share link (no experimental API)
    st.markdown("### Dela som l√§sbar l√§nk")
    st.caption("Skapar en l√§sbar 'report'-vy av din insiktskarta. Ingen data sparas ‚Äì allt ligger inb√§ddat i l√§nken.")
    if st.button("Skapa delningsl√§nk üîó", use_container_width=True):
        tok = pack_share_data()
        theme = "light" if st.session_state.profile.get("light_theme") else "dark"
        qp_set({"mode": "report", "r": tok, "theme": theme})
        # Efter uppdatering av query params sker en automatisk rerun och adressraden uppdateras.

    st.info("Klar & vacker. Om n√•got k√§nns mycket ‚Äì pausa, andas, ta en mjuk promenad. üåø")
    if st.button("B√∂rja om"):
        st.session_state.clear()
        st.rerun()

# --------- REPORT-ONLY VIEW (if ?mode=report&r=...) ---------
report_data = enter_report_mode_from_query()
if report_data:
    # Apply theme from query
    theme = qp_get("theme", "dark")
    inject_css(light=(theme == "light"))
    st.markdown("<div class='title center'>üìú MirrorGarden ‚Äî Delad insiktskarta</div>", unsafe_allow_html=True)
    st.markdown("<div class='divider'></div>", unsafe_allow_html=True)

    # Render read-only report
    st.markdown(make_markdown_report(report_data))
    st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
    if st.button("√ñppna i upplevelse-l√§ge ‚Üí", use_container_width=True):
        qp_clear()
        st.rerun()
    st.stop()

# --------- RENDER ENGINE ---------
current = SECTIONS[st.session_state.step]["id"]
if current == "intro":
    render_intro()
elif current == "ground":
    render_ground()
elif current == "timeline":
    render_timeline()
elif current == "voices":
    render_voices()
elif current == "boundaries":
    render_boundaries()
elif current == "attachment":
    render_attachment()
elif current == "values":
    render_values()
elif current == "cards":
    render_cards()
elif current == "soothing":
    render_soothing()
elif current == "letter":
    render_letter()
elif current == "summary":
    render_summary()
